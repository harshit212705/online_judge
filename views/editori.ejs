
  
  <link rel="stylesheet" href="/css/ide.css">
  <div class="contain">

    <div class="row upperrow">
      <!-- selecting the language -->
      <div class="col-lg-4">
        <select class="custom-select" id="language">
          <option value="c">C</option>
          <option value="cpp">CPP</option>
          <option value="csharp">C#</option>
          <option value="golang">GO</option>
          <option value="java">JAVA</option>
          <option value="javascript">JAVASCRIPT</option>
          <option value="python2">PYTH(2.7)</option>
          <option value="python3">PYTH(3.6)</option>
          <option value="ruby">RUBY</option>
          <option value="rust">RUST</option>

        </select>
      </div>
      <div class="col-lg-6">
        <p class="lead text-center text-white">Enter Your Code here</p>
      </div>
      <div class="d-flex justify-content-around">
       
        <!-- cog icon -->
        <div class="col-sm-1">
          <div class="dropdown dropleft">
            <button type="button" id="butto" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><i class="fa fa-cog"></i></button>
            <div class="dropdown-menu bg-secondary" aria-labelledby="butto">
              <div class="dropdown-item">
                <div class="form-group">
                  <label for="fontsize">
                    Font-size
                  </label>
                  <input type="number" class="form-control" id="fontsize" name="fontsize" min="0" max="48" value="16" placeholder="Set the font-size">
                </div>
              </div>
              <div class="dropdown-item">
                <div class="form-group">
                  <div class="col">
                    <div class="row">
                      <caption>Theme</caption>
                    </div>
                    <div class="row">
                      <input type="radio" name="light" id="light">
                      <label for="light">
                        Light
                      </label>
                    </div>
                    <div class="row">

                      <input type="radio" name="light" id="dark" checked>
                      <label for="dark">
                        Dark
                      </label>
                    </div>
                  </div>


                </div>
              </div>
            </div>
          </div>

        </div>
      </div>

    </div>




    <!-- setting up the editor  -->
          <div id="editor">

            </div>
  
    <!-- setting the custom input and the run/submit buttons -->
    <div class="d-flex flex-row-reverse">
      <%if(status !== "unverified"){%>
      <button class="btn btn-light mr-3" type="button" name="submit" onclick="submit()" id="submitbutton">Submit</button><br>
      <%}%>
      <button class="btn btn-light mr-3" type="button" name="run" onclick="run()" id="runbutton">Run</button>
    </div>
    <div class="defpad">
        <div class="row">
            <div class="col-lg-6">
                <textarea name="stdin" rows="8" class="form-control" id="stdin" style="resize:none" placeholder="input"></textarea><br>
            </div>
        </div>
    </div>
    <!-- setting up the space to show the output/testcase results -->
    <div class="defpad">
        <div class="row">
            <div class="col-lg-6">
                <div class="outputspace">

                    <div class="status">
                
                    </div>
                    <div class="time">
                
                    </div>
                    <div class="memory">
                
                    </div>
                    <div class="outut">
                
                    </div>
                    <table class="table table-bordered table-hover bg-light text-center mt-5">
                         <tbody class="testcasearea">

                         </tbody>    
                    </table>
                  </div>
            </div>
        </div>
    </div>
  
   
    

  </div>
<!-- script to include ACE smart editor -->
  <script src="/ace-builds/src-noconflict/ace.js" type="text/javascript" charset="utf-8"></script>
  <!-- script to adjust setting of the ACE smart editor -->
  <script>
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/twilight");
    editor.session.setMode("ace/mode/c_cpp");
    editor.resize();
    editor.setOptions({
      autoScrollEditorIntoView: true,
      maxLines: 35,
      minLines: 25,
      wrap: true,
      fontSize: '1rem'
    });
    editor.renderer.setScrollMargin(10, 10, 10, 10);
    document.querySelector("#language").addEventListener("change", function() {
      var lang = document.querySelector("#language").value
      if (lang === "c" || lang === "cpp")
        lang = "c_cpp";
      else if (lang === "python2" || lang === "python3")
        lang = "python";
      editor.session.setMode("ace/mode/" + lang);
    });
    document.querySelector("#fontsize").addEventListener("change",function(){
      var fontsize=document.querySelector("#fontsize").value/16;
      if(fontsize>=0&&fontsize<=3)
      {
        editor.setOptions({
          fontSize:fontsize+'rem'
        })
      }
    })
    document.querySelector("#light").addEventListener("click",function(){
    editor.setTheme("ace/theme/eclipse");
        
    });
    document.querySelector("#dark").addEventListener("click",function(){
    editor.setTheme("ace/theme/twilight");
        
    });
  </script>





<!-- js files to run the page -->
  <script src="/js/jide.js" charset="utf-8"></script>
  <script type="text/javascript">
// save the code on pagehide
    window.addEventListener("pagehide",function(){
      save();
    },false);

// set the previously typed code on pageshow
    window.addEventListener("pageshow",function(){
      getcurrent();
    },false);
// set the previously typed code in the the ace editor on language change
    document.getElementById("language").addEventListener("change",function(){
      getcurrent();
      
    });
    // save the code on language change
    document.getElementById("language").addEventListener("focus",function(){
      save();
      
    });


// function to run the code
    function run() {
      if (/\S/.test(editor.getValue())){

      document.querySelector(".time").innerHTML="";
      document.querySelector(".memory").innerHTML="";
      document.querySelector(".outut").innerHTML="";
      document.querySelector(".testcasearea").innerHTML="";
      document.querySelector("#runbutton").setAttribute("disabled","");
      document.querySelector("#submitbutton").setAttribute("disabled","");
      document.querySelector(".status").innerHTML = '<label class="text-white">STATUS:</label><br><textarea name="status" rows="1" cols="30" id="status" readonly style="resize:none">Submission Queued</textarea>';

      var runbody = {
        source_code: '',
        language: '',
        stdin: ''
      }
      runbody.source_code = editor.getValue();
      runbody.language = document.querySelector("#language").value;
      runbody.stdin = document.querySelector("#stdin").value;
// AJAX call to the API
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var output = this.response;
          var out = "";
          var st = output.status.description;
          switch (output.status.id) {
            case 3:
              out =decodeURIComponent(atob(output.stdout).split('').map(function(c) {return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); }).join(''));
              break;
            case 6:
              out =decodeURIComponent(atob(output.compile_output).split('').map(function(c) {return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); }).join(''));
                    break;
            case 11:
              out =decodeURIComponent(atob(output.stdout).split('').map(function(c) {return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); }).join(''));
          }
          document.querySelector(".status").innerHTML = '<label class="text-white">STATUS:</label><br><textarea name="status" rows="1" cols="30" id="status" readonly style="resize:none">' + st + '</textarea>';
          if(output.status.id!==6){
          document.querySelector(".time").innerHTML = '<label class="text-white">TIME:</label><br><textarea name="time" rows="1" cols="30" id="time" readonly style="resize:none">' + output.time + 'sec</textarea>';
          document.querySelector(".memory").innerHTML = '<label class="text-white">MEMORY:</label><br><textarea name="memory" rows="1" cols="30" id="memory" readonly style="resize:none">' + output.memory + 'KB</textarea>';
          }
          if (out)
          document.querySelector(".outut").innerHTML = '<label class="text-white">OUTPUT:</label><br><textarea name="stdout" rows="8" class="form-control" id="stdout" readonly style="resize:none">' + out + '</textarea>';
          save();
          document.querySelector("#runbutton").removeAttribute("disabled","");
      document.querySelector("#submitbutton").removeAttribute("disabled","");




        }
      };

      xhttp.open("POST", "/editor", true);
      xhttp.setRequestHeader("Content-Type", "application/json");
      xhttp.send(JSON.stringify(runbody));
    }
  }
  // save the typed code to the database
    function save(){
      var saveobj={
        submission: editor.getValue(),
        language:document.querySelector("#language").value,
        problem_id:<%=problem_id%>
      }
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {


        }}
        xhttp.open("POST", "/editor/save", true);
        xhttp.setRequestHeader("Content-Type", "application/json");
        xhttp.send(JSON.stringify(saveobj));
    }
    // submit the code to the judge0 API and fetch the results
    function submit(){
      if (/\S/.test(editor.getValue())){
      document.querySelector(".time").innerHTML="";
      document.querySelector(".memory").innerHTML="";
      document.querySelector(".outut").innerHTML="";
      document.querySelector(".testcasearea").innerHTML="";
      document.querySelector("#runbutton").setAttribute("disabled","");
      document.querySelector("#submitbutton").setAttribute("disabled","");



      document.querySelector(".status").innerHTML = '<label class="text-white">STATUS:</label><br><textarea name="status" rows="1" cols="30" id="status" readonly style="resize:none">Submission Queued</textarea>';

      var submitbody = {
        source_code: '',
        language: ''
      }
      submitbody.source_code = editor.getValue();
      submitbody.language = document.querySelector("#language").value;
      submitbody.problem_id=<%=problem_id%>;
      submitbody.time_limit=<%=time_limit%>;
      submitbody.memory_limit=<%=memory_limit%>

// AJAX call to the API
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          var outp = JSON.parse(this.response);
          var dbstat;
          var stat=outp.ans.find(function(element,index){
              return element.status.description==="Compilation Error";
          });
          if(!stat)
          {
            stat=outp.ans.find(function(element){
              return element.status.description.slice(0,13)==="Runtime Error";
          });
          if(!stat)
          {
            stat=outp.ans.find(function(element){
              return element.status.description==="Time Limit Exceeded";
          });
          if(!stat)
          {
            stat=outp.ans.find(function(element){
              return element.status.description==="Wrong Answer";
          });
          if(!stat)
          {
            stat=outp.ans.find(function(element){
              return element.status.description==="Accepted";
          });
          }
        }
       }
      }
      var maxtime=Math.max.apply(Math, outp.ans.map(function(o) { return o.time; }));
      var maxmemory=Math.max.apply(Math, outp.ans.map(function(o) { return o.memory; }));


      var showstat=stat.status.description;
        var out = "";
        var statsymb;
        if(showstat==="Compilation Error"){
          var compileerr=decodeURIComponent(atob(outp.ans[0].compile_output).split('').map(function(c) {return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2); }).join(''));
          document.querySelector(".status").innerHTML = '<label class="text-white">STATUS:</label><br><textarea name="status" rows="1" cols="30" id="status" readonly style="resize:none">' + showstat + '</textarea>';
          document.querySelector(".outut").innerHTML = '<label class="text-white">OUTPUT:</label><br><textarea name="stdout" rows="8" class="form-control" id="stdout" readonly style="resize:none">' + compileerr + '</textarea>';
          statsymb='CEq';
        }
        else{
          document.querySelector(".status").innerHTML = '<label class="text-white">STATUS:</label><br><textarea name="status" rows="1" cols="30" id="status" readonly style="resize:none">' + showstat + '</textarea>';
          document.querySelector(".testcasearea").innerHTML = '<thead><tr><th scope="col">Testcase</td><th scope="col">Time</td><th scope="col">Status</td></tr><thead><tbody>';
          outp.ans.forEach(function(element,index){
            switch(element.status.id){
              case 3:statsymb='AC✔';
                      break;
              case 4:statsymb='WA❌';
                    break;
              case 5:statsymb='TLE⏲️'
                    break;
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:statsymb='RE⚠️';
            }
            document.querySelector(".testcasearea").innerHTML +='<tr><td>Testcase'+(index+1)+'</td><td>'+element.time+'</td><td>'+statsymb+'</td></tr>';
            
          });  
          document.querySelector(".testcasearea").innerHTML +='</tbody>';  
        }
        switch(stat.status.description.slice(0,8)){
          case "Compilat":dbstat = 'CE';
                                   break;
          case "Runtime ":dbstat = 'RE';
                               break;
          case "Time Lim":dbstat = 'TLE';
                                     break;
          case "Wrong An":dbstat = 'WA';
                              break;                           
          case "Accepted":dbstat = 'AC';
                          break;                                                             

          }
        console.log(dbstat);
        
        if((<%=check_id%>===-1)||(<%=check_id%>===0)){
        submitsave(maxtime,maxmemory,dbstat);

        }
        else{
        submitsavecontest(maxtime,maxmemory,dbstat);

        }
        save();
        document.querySelector("#runbutton").removeAttribute("disabled","");
      document.querySelector("#submitbutton").removeAttribute("disabled","");
      
      
        }
      };

      xhttp.open("POST", "/editor/submit", true);
      xhttp.setRequestHeader("Content-Type", "application/json");
      xhttp.send(JSON.stringify(submitbody));
    }
  }
  // function to save the submission
    function submitsave(maxtime,maxmemory,statsymb){
      var submitobj={
        solution: editor.getValue(),
        problem_id:<%=problem_id%>,
        language:document.querySelector("#language").value,
        time:maxtime,
        memory:Math.ceil(maxmemory/1000),
        status:statsymb
      }
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {


        }}

        xhttp.open("POST", "/editor/submit/save", true);
        xhttp.setRequestHeader("Content-Type", "application/json");
        xhttp.send(JSON.stringify(submitobj));
    }


// function to save the submission while in contest
    function submitsavecontest(maxtime,maxmemory,statsymb){
      var submitobj={
        solution: editor.getValue(),
        problem_id:<%=problem_id%>,
        contest_id:<%=contest_id%>,
        language:document.querySelector("#language").value,
        time:maxtime,
        memory:Math.ceil(maxmemory/1000),
        status:statsymb
      }
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if (this.responseText === 'timeup'){
            alert('Contest is already over go to practice section to solve problem');
            window.location.href = '/practice';
          }
          

        }}

        xhttp.open("POST", "/editor/submit/save/contest", true);
        xhttp.setRequestHeader("Content-Type", "application/json");
        xhttp.send(JSON.stringify(submitobj));
    }

// function to get the previously typed code
    function getcurrent(){
      var submitobj={
        problem_id:<%=problem_id%>,
        language:document.querySelector("#language").value
      }
      var xhttp;
      xhttp = new XMLHttpRequest();
      xhttp.responseType = "json";
      xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
          if(this.response){  
          var solution=this.response.solution;
            editor.setValue(solution);
        
        }
        else{
          editor.setValue("");

        }

        }}

        xhttp.open("POST", "/editor/getcurrent", true);
        xhttp.setRequestHeader("Content-Type", "application/json");
        xhttp.send(JSON.stringify(submitobj));
    }
    
  </script>
